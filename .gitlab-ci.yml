stages:
  - php-build
  - php-test
  - php-release
  - nginx-build
  - nginx-test
  - nginx-release
  - nginx-xdebug-build
  - nginx-xdebug-test
  - nginx-xdebug-release
  - cleanup


before_script:
  - export ISOLATION=buildpipeline{CI_BUILD_PIPELINE}
  - export COMPOSE_PROJECT_NAME=${ISOLATION}
  - export APP_VERSION=$(git describe --always --dirty)
  - export PHP_IMAGE_NAME=dmstr/php-yii2
  - export STACK_PHP_IMAGE=${PHP_IMAGE_NAME}:${APP_VERSION}
  - export REGISTRY_PHP_IMAGE=${PHP_IMAGE_NAME}:${CI_BUILD_REF_NAME}
  - echo "Building image"
  - echo ${STACK_PHP_IMAGE}



build:php:
  stage: php-build
  script:
    - docker-compose build --pull php

build:php-alpine:
  stage: php-build
  script:
    - docker-compose build --pull php-alpine

test:php:
  stage: php-test
  script:
    - PHP_SERVICE=php sh test/image-commands.sh

test:php-alpine:
  stage: php-test
  script:
    - PHP_SERVICE=php-alpine sh test/image-commands.sh
    - docker-compose run --rm php-alpine php /test/requirements.php

test:php:allow-fail:
  stage: php-test
  script:
    - cd php-7.0
    - docker run ${STACK_PHP_IMAGE} sh -c 'composer global update --dry-run; composer diagnose'
    - PHP_ENABLE_XDEBUG=1 docker-compose up -d
    - sleep 15
    - docker-compose exec php php -i | grep xdebug
    - docker-compose up -d
    - docker-compose ps
    - docker-compose logs
    - sleep 10
    - docker-compose exec php php -i | grep xdebug
  allow_failure: true
  except:
    - tags

lint:php:
  stage: php-test
  script:
    - cd php-7.0
    - docker-compose run --rm php composer global show

release:php:latest:
  stage: php-release
  only:
    - latest
    - tags
  script:
    - docker login --username ${REGISTRY_USER} --password ${REGISTRY_PASS} ${REGISTRY_HOST}
    - docker tag ${STACK_PHP_IMAGE} ${REGISTRY_PHP_IMAGE}
    - docker push ${REGISTRY_PHP_IMAGE}
    - docker tag ${STACK_PHP_IMAGE}-alpine ${REGISTRY_PHP_IMAGE}-alpine
    - docker push ${REGISTRY_PHP_IMAGE}-alpine



build:php-nginx:
  stage: nginx-build
  script:
    - cd nginx
    - docker-compose build --pull php-nginx

build:php-alpine-nginx:
  stage: nginx-build
  script:
    - cd nginx
    - docker-compose build --pull php-alpine-nginx

test:php-alpine-nginx:
  stage: nginx-test
  script:
    - docker-compose run --rm php-alpine-nginx php --version
    - docker-compose run --rm php-alpine-nginx composer --version
    - docker-compose run --rm php-alpine-nginx codecept --version
    - docker-compose run --rm php-alpine-nginx phpunit --version
    - docker-compose run --rm php-alpine-nginx mysql --version

release:nginx:latest:
  stage: nginx-release
  only:
    - latest
    - tags
  script:
    - docker login --username ${REGISTRY_USER} --password ${REGISTRY_PASS} ${REGISTRY_HOST}
    - docker tag ${STACK_PHP_IMAGE}-nginx ${REGISTRY_PHP_IMAGE}-nginx
    - docker push ${REGISTRY_PHP_IMAGE}-nginx
    - docker tag ${STACK_PHP_IMAGE}-alpine-nginx ${REGISTRY_PHP_IMAGE}-alpine-nginx
    - docker push ${REGISTRY_PHP_IMAGE}-alpine-nginx


build:php-alpine-nginx-xdebug:
  stage: nginx-xdebug-build
  script:
    - cd nginx
    - docker-compose build --pull php-alpine-nginx-xdebug

test:php-alpine-nginx-xdebug:
  stage: nginx-xdebug-test
  script:
    - docker-compose run --rm -e PHP_ENABLE_XDEBUG=1 php-alpine-nginx-xdebug php -i | grep xdebug

release:nginx-xdebug:latest:
  stage: nginx-xdebug-release
  only:
    - latest
    - tags
  script:
    - docker login --username ${REGISTRY_USER} --password ${REGISTRY_PASS} ${REGISTRY_HOST}
    - docker tag ${STACK_PHP_IMAGE}-nginx-xdebug ${REGISTRY_PHP_IMAGE}-nginx-xdebug
    - docker push ${REGISTRY_PHP_IMAGE}-nginx-xdebug



cleanup:
  stage: cleanup
  script:
    - docker-compose kill
    - docker-compose rm -fv --all
    - docker-compose down --rmi local --volumes
