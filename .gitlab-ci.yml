stages:
  - build
  - test
  - release
  - cleanup

before_script:
  - export ISOLATION=buildref${CI_BUILD_REF}$(echo ${CI_BUILD_REF_NAME} | tr -dc '[:alnum:]\n\r' | tr '[:upper:]' '[:lower:]')
  - export COMPOSE_PROJECT_NAME=${ISOLATION}
  - export APP_VERSION=$(git describe --always --dirty)
  - export PHP_IMAGE_NAME=dmstr/php-yii2
  - export STACK_PHP_IMAGE=${PHP_IMAGE_NAME}:${APP_VERSION}
  - export REGISTRY_PHP_IMAGE=${PHP_IMAGE_NAME}:${CI_BUILD_REF_NAME}
  - echo "Building image"
  - echo ${STACK_PHP_IMAGE}

build:
  stage: build
  script:
    - docker-compose build --pull

test:
  stage: test
  script:
    - docker-compose run --rm php composer --version
    - docker-compose run --rm php codecept --version
    - docker-compose run --rm php phpunit --version
    - docker-compose run --rm php yii

test:allow-fail:
  stage: test
  script:
    - docker run ${STACK_PHP_IMAGE} sh -c 'composer global update --dry-run; composer diagnose'
    - PHP_ENABLE_XDEBUG=1 docker-compose up -d
    - sleep 15
    - docker-compose exec php php -i | grep xdebug
    - docker-compose up -d
    - docker-compose ps
    - docker-compose logs
    - sleep 10
    - docker-compose exec php php -i | grep xdebug
  allow_failure: true
  except:
    - tags

lint:
  stage: test
  script:
    - docker-compose run --rm php composer global show

release:latest:
  stage: release
  only:
    - latest
    - tags
  script:
    - docker tag ${STACK_PHP_IMAGE} ${REGISTRY_PHP_IMAGE}
    - docker push ${REGISTRY_PHP_IMAGE}
    - docker tag ${STACK_PHP_IMAGE}-nginx ${REGISTRY_PHP_IMAGE}-nginx
    - docker push ${REGISTRY_PHP_IMAGE}-nginx

cleanup:
  stage: cleanup
  script:
    - docker-compose kill
    - docker-compose rm -fv --all
    - docker-compose down --rmi local --volumes
